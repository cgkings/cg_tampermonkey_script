name: Update Jump to Emby to Greasy Fork

on:
  push:
    tags:
      - 'jump_to_emby_v*'  # 当推送特定标签时自动触发
  workflow_dispatch:       # 允许手动触发
    inputs:
      version:
        description: '版本号 (例如: 0.0.1)'
        required: true
      changelog:
        description: '更新内容 (使用换行分隔每条内容)'
        required: true

permissions:
  contents: write

jobs:
  update-greasy-fork:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Extract version and changelog
        id: extract_info
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # 手动触发时使用输入的版本号和更新日志
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            # 将输入的更新日志转换为适合GitHub Actions的格式
            FORMATTED_CHANGELOG=$(echo "${{ github.event.inputs.changelog }}" | sed ':a;N;$!ba;s/\n/%0A/g')
            echo "CHANGELOG=$FORMATTED_CHANGELOG" >> $GITHUB_OUTPUT
          else
            # 自动触发时从标签提取版本号
            VERSION=${GITHUB_REF#refs/tags/jump_to_emby_v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            
            # 提取标签消息作为更新日志 - 改进处理方式
            TAG_MESSAGE=$(git tag -l --format='%(contents)' jump_to_emby_v$VERSION)
            # 标准化换行符并格式化为GitHub Actions可用的格式
            TAG_MESSAGE=$(echo "$TAG_MESSAGE" | tr -d '\r' | sed ':a;N;$!ba;s/\n/%0A/g')
            echo "CHANGELOG=$TAG_MESSAGE" >> $GITHUB_OUTPUT
          fi
          
      - name: Update script version
        run: |
          # 更新版本号
          sed -i "s/\/\/ @version      .*$/\/\/ @version      ${{ steps.extract_info.outputs.VERSION }}/" scripts/Jump_to_Emby/Jump_to_Emby.user.js
          
          # 读取更新后的文件内容
          SCRIPT_CONTENT=$(cat scripts/Jump_to_Emby/Jump_to_Emby.user.js)
          
          # 使用GitHub API更新文件
          # 处理换行符，确保格式正确
          CHANGELOG_CONTENT=$(echo "${{ steps.extract_info.outputs.CHANGELOG }}" | sed 's/%0A/\\n/g')
          
          # 安装jq用于解析JSON
          sudo apt-get install -y jq
          
          # 更新脚本文件
          curl -X PUT \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/contents/scripts/Jump_to_Emby/Jump_to_Emby.user.js" \
            -d '{
              "message": "Update version to ${{ steps.extract_info.outputs.VERSION }}",
              "content": "'"$(echo -n "$SCRIPT_CONTENT" | base64 -w 0)"'",
              "sha": "'$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/contents/scripts/Jump_to_Emby/Jump_to_Emby.user.js" | jq -r .sha)'",
              "branch": "main"
            }'
          
          # 更新README.md中的更新日志部分
          README_PATH="README.md"
          README_CONTENT=$(cat $README_PATH)
          
          # 提取更新日志内容，转换为适合展示的格式
          DISPLAY_CHANGELOG=$(echo "${{ steps.extract_info.outputs.CHANGELOG }}" | sed 's/%0A/\n- /g')
          NEW_VERSION_LOG="### v${{ steps.extract_info.outputs.VERSION }}\n\n- $DISPLAY_CHANGELOG"
          
          # 检查README中是否已有"更新日志"部分
          if [[ "$README_CONTENT" == *"## 更新日志"* ]]; then
            # 找到"更新日志"部分的位置并在其后插入新的版本日志
            sed -i '/## 更新日志/a \
            '"$NEW_VERSION_LOG"'' $README_PATH
          else
            # 如果没有"更新日志"部分，则在文件末尾添加
            echo -e "\n## 更新日志\n\n$NEW_VERSION_LOG" >> $README_PATH
          fi
          
          # 上传更新后的README.md
          README_CONTENT_UPDATED=$(cat $README_PATH)
          curl -X PUT \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/contents/README.md" \
            -d '{
              "message": "Update README with changelog for version ${{ steps.extract_info.outputs.VERSION }}",
              "content": "'"$(echo -n "$README_CONTENT_UPDATED" | base64 -w 0)"'",
              "sha": "'$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/contents/README.md" | jq -r .sha)'",
              "branch": "main"
            }'
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('jump_to_emby_v{0}', github.event.inputs.version) || github.ref }}
          name: Jump to Emby v${{ steps.extract_info.outputs.VERSION }}
          body: |
            Jump to Emby v${{ steps.extract_info.outputs.VERSION }} 发布了！
            
            ## 更新内容
            ${{ steps.extract_info.outputs.CHANGELOG }}
          files: |
            scripts/Jump_to_Emby/Jump_to_Emby.user.js
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}